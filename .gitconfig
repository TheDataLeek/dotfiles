[user]
	name = Zoe Farmer
	email = zoe@dataleek.io
[github]
	user = thedataleek

[branch]
;   # autosetupmerge auto-adds the --track flag to each git branch,
;   # which is helpful for arc (part of Phabricator).  autosetuprebase
;   # means that instead of merging it will rebase.  Weird you need both!
;   ; autosetupmerge = always
;   ; autosetuprebase = always

[alias]
;   # Versions of commands that handle submodules properly.
;   co = "!f() { git checkout \"$@\" && git submodule update --init --recursive; }; f"
;   p = "!f() { git pull \"$@\" && git submodule update --init --recursive; }; f"
;   m = "!f() { git merge \"$@\" && git submodule update --init --recursive; }; f"
;   gsu = "!f() { git submodule sync --recursive && git submodule update --init --recursive; }; f"

;   # Branch management for dealing with phabricator and github-style deploys.
;   # e.g. deploy-branch, review-branch, find-reviewers
;   # Note that these reference scripts from Khan/git-workflow
;   # Those scripts should be installed and part of the default path.
;   phabricator-branch = !git review-branch
;   rgrep = !git recursive-grep
;   findreviewers = !git find-reviewers ; old-style had no dash in name

;   # Abbreviations for KA specific tools
;   db = !git deploy-branch
;   rb = !git review-branch
;   pb = !git review-branch       ; short for 'phabricator branch'

;   # Other useful commands.
;   outgoing = "!git fetch >/dev/null 2>&1; git log @{upstream}..HEAD"
;   incoming = "!git fetch >/dev/null 2>&1; git log HEAD..@{upstream}"
;   update-submodule = !bash -c 'git pull --no-rebase && pushd $1 && git co master && git pull && popd && git commit ${1%/} -m Substate\\ for\\ ${1%/} -m Test\\ plan: -m None && git push' --

;   # Commands for manipulating deploy tags.
;   # which-deploy: in which deploy did this commit first go out?
;   # prev-deploy and next-deploy: what deploys came before and after this one?
;   # when-deploy: when was this deploy completed?
;   which-deploy = "!f() { git tag --contains \"$@\" | grep '^gae-' | grep -v bad | head -n 1 | sed 's/gae-//'; }; f"
;   prev-deploy = "!f() { git tag | grep '^gae-' | grep -v bad | grep -B 1 gae-\"$1\" | head -n 1 | sed 's/gae-//'; }; f"
;   next-deploy = "!f() { git tag | grep '^gae-' | grep -v bad | grep -A 1 gae-\"$1\" | tail -n 1 | sed 's/gae-//'; }; f"
;   when-deploy = "!f() { git cat-file -p gae-\"$1\" | perl -nle 'print scalar localtime $1 if /^tagger .* (\\d+) \\S+$/'; }; f"

;   # For after a commit fails with lint, and it says 'commit message saved...'
;   recommit = "!git commit -F \"`git rev-parse --git-dir`\"/commit.save"
;   weekly = "!git log --author=$USER --since=`date -d last\\ monday +%Y/%m/%d`"

;   # Versions of commands with useful options specified.
  graph = log --graph --decorate --oneline --pretty=format:"%h%x20%Cgreen%d%x20%Cred%an%x20%Cblue%ad%x20%Creset%s" --all --full-history --date=short
  lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
  lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
  lg = !"git lg1"
;   ls-ignored = ls-files --exclude-standard --ignored --others
;   conflicts = diff --name-only --diff-filter=U

[commit]
  ; template = ~/.git_template/commit_template
  ; gpgsign = true

[push]
;   default = simple

# These next three sections allow us to use the 'git-bigfile' extension.
; [filter "bigfile"]
;   clean = git-bigfile filter-clean
;   smudge = git-bigfile filter-smudge

; [git-bigfile]
;   transport = s3

# These configuration directives used to be part of the global .gitconfig.khan,
# but actually represent global *preferences* rather than anything specific to
# the KA workflow.
#
# They are installed to your filesystem but are not "included" by default.
# If you wish to use them, you can either:
#
#  1. Copy and paste the ones you want into your global ~/.gitconfig, and modify
#     as you see fit!
#  2. If you want all of these everywhere (not just in KA directories), you can
#     include them in your global gitconfig via :
#       `git config --global include.path ~/.gitconfig.khan-xtra`
#  3. If you want these active but only in KA repositories, add a similar
#     include.path directive to the ~/.gitconfig.khan file.  You can modify the
#     file directory or do it from the command line with:
#       `git config -f ~/.gitconfig.khan include.path ~/.gitconfig.khan-xtra`
[alias]
  ; # Abbreviations.
  ; st = status
  ; ci = commit
  ; # Show branches (and tags) ordered by last-modified.
  br = for-each-ref --sort=-committerdate --format='%(HEAD) %(refname:short)' refs/heads/
  ; tg = for-each-ref --sort=taggerdate --format='%(refname:short)' refs/tags/
  ; df = diff
  ; dfs = diff --staged
  ; lp = log -p
  ; bw = blame -w            ; ignore whitespace changes

[merge]
  # Always show a diffstat at the end of a merge
  stat = true

[diff]
  # Use mnemonic prefixes (index, work tree, commit, object) instead of the standard a and b notation

  # Detect renames as well as copies
  ; renames = copies

[core]
    excludesfile = /home/zoe/.gitignore
    editor = nvim
[init]
	defaultBranch = main
